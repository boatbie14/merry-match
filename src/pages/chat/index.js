import React, { useState, useEffect, useRef } from "react";
import { useSearchParams } from "next/navigation";
import MatchingLeftColumn from "@/components/match/MatchingLeftColumn";
import ChatBox from "@/components/chat/ChatBox";
import { useChatUser } from "@/hooks/useChatUser";
import { useChatUserDetail } from "@/hooks/useChatUserDetail";
import { useChatRoomState } from "@/hooks/useChatRoomState"; // üî• ‡πÉ‡∏ä‡πâ hook ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
import DoubleHeartsIcon from "@/components/icons";
import { GoChevronLeft } from "react-icons/go";

export default function MatchPage() {
  const { chatData: originalChatData, loading: chatLoading, error: chatError, currentUser } = useChatUser();
  const { chatUserDetail, loading: userDetailLoading, error: userDetailError, getChatUserName } = useChatUserDetail();

  // üöÄ ‡πÉ‡∏ä‡πâ hook ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ chat room state
  const { chatData, updateChatRoom } = useChatRoomState(originalChatData);

  const searchParams = useSearchParams();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ parameter u ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const hasUserParam = searchParams.get("u");

  // üîß FIX: ‡πÄ‡∏Å‡πá‡∏ö current user parameter ‡πÄ‡∏û‡∏∑‡πà‡∏≠ detect ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  const currentUserParamRef = useRef(hasUserParam);
  const [roomResetTrigger, setRoomResetTrigger] = useState(0);

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô left panel ‡∏ö‡∏ô mobile
  const [showLeftPanel, setShowLeftPanel] = useState(false);

  // üîß FIX: Reset room state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô user
  useEffect(() => {
    if (currentUserParamRef.current !== hasUserParam) {
      console.log(`User parameter changed from ${currentUserParamRef.current} to ${hasUserParam}`);

      // Force reset room state by triggering re-render
      setRoomResetTrigger((prev) => prev + 1);
      currentUserParamRef.current = hasUserParam;
    }
  }, [hasUserParam]);

  // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ panel state ‡∏´‡∏•‡∏±‡∏á component mount
  useEffect(() => {
    if (!hasUserParam) {
      setShowLeftPanel(true); // ‡πÑ‡∏°‡πà‡∏°‡∏µ u ‚Üí ‡πÅ‡∏™‡∏î‡∏á panel
    } else {
      setShowLeftPanel(false); // ‡∏°‡∏µ u ‚Üí ‡∏ã‡πà‡∏≠‡∏ô panel
    }
  }, [hasUserParam]);

  // ‡∏£‡∏ß‡∏° loading states
  const isLoading = chatLoading || userDetailLoading;
  const hasError = chatError || userDetailError;

  // üî• Callback function ‡πÄ‡∏û‡∏∑‡πà‡∏≠ update is_message ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  const handleMessageSent = () => {
    updateChatRoom({ is_message: true }); // ‚úÖ ‡πÉ‡∏ä‡πâ function ‡∏à‡∏≤‡∏Å hook ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
  };

  // üîß FIX: ‡πÉ‡∏ä‡πâ current chatData ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö is_message ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const shouldShowWelcomeMessage = chatData && !chatData.chatRoom?.is_message;

  return (
    <div className="row pt-[52px] md:pt-[88px]">
      <div className="container-full flex flex-col xl:flex-row relative">
        {/* Left Panel - ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏ö‡∏ô Desktop, ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö slide ‡∏ö‡∏ô Mobile */}
        <div
          id="match-chat"
          className={`
            hidden lg:block w-full xl:w-3/12 xl:block
            lg:relative lg:transform-none lg:transition-none
            ${showLeftPanel ? "lg:hidden" : ""}
          `}
        >
          <MatchingLeftColumn />
        </div>

        {/* Mobile Sliding Panel */}
        <div
          className={`
            fixed top-[52px] left-0 h-[calc(100vh-52px)] w-full bg-white z-50 
            transform transition-transform duration-300 ease-in-out
            lg:hidden
            ${showLeftPanel ? "translate-x-0" : "-translate-x-full"}
          `}
        >
          <MatchingLeftColumn onNavigate={() => setShowLeftPanel(false)} />
        </div>

        {/* Overlay ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mobile ‡πÄ‡∏°‡∏∑‡πà‡∏≠ panel ‡πÄ‡∏õ‡∏¥‡∏î */}
        {showLeftPanel && <div className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden" onClick={() => setShowLeftPanel(false)} />}

        <div id="chat-container" className="w-full bg-[#150404] xl:w-9/12 h-[calc(100vh-52px)] lg:h-[calc(100vh-88px)] relative">
          {isLoading && (
            <div className="flex items-center justify-center h-full">
              <p className="text-gray-500">Loading...</p>
            </div>
          )}

          {hasError && (
            <div className="flex items-center justify-center h-full">
              <div className="text-center">
                <p className="text-red-500">Error loading chat:</p>
                {chatError && <p className="text-sm text-[#FF1559] mt-1">Chat: {chatError}</p>}
                {userDetailError && <p className="text-sm text-[#FF1559] mt-1">User: {userDetailError}</p>}
              </div>
            </div>
          )}

          {/* ‡πÅ‡∏™‡∏î‡∏á chat content ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ user parameter */}
          {chatData && currentUser && !isLoading && hasUserParam && (
            <div className="h-full flex flex-col bg-[#160404]" key={`chat-${hasUserParam}-${roomResetTrigger}`}>
              {/* Header Section */}
              <div className="bg-white p-4 lg:hidden">
                <button className="flex flex-row items-center gap-4" onClick={() => setShowLeftPanel(true)}>
                  <GoChevronLeft color="#727B9B" size={20} /> {getChatUserName()}
                </button>
              </div>

              {/* Welcome Message - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ is_message = false */}
              {shouldShowWelcomeMessage && (
                <div className="flex-shrink-0 pt-6 lg:pt-8 pb-4">
                  <div className="max-w-[740px] flex flex-row justify-center items-center gap-8 border-1 border-[#DF89C6] bg-[#F4EBF2] rounded-2xl lg:rounded-3xl p-3 lg:p-6 mx-4 lg:mx-auto">
                    <DoubleHeartsIcon size={48} color="#FF1659" />
                    <p className="text-[#64001D] text-xs lg:text-sm">
                      Now you and <span className="font-semibold">{getChatUserName()}</span> are Merry Match! You can message something nice
                      and make a good conversation. Happy Merry!
                    </p>
                  </div>
                </div>
              )}

              {/* Chat Component - ‡πÉ‡∏ä‡πâ flex-1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ */}
              <div className="flex-1 min-h-0">
                {/* üöÄ UPDATED: ‡πÄ‡∏û‡∏¥‡πà‡∏° onMessageSent callback ‡πÅ‡∏•‡∏∞ key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö force re-render */}
                <ChatBox
                  key={`chat-component-${hasUserParam}-${roomResetTrigger}`}
                  chatData={chatData}
                  currentUser={currentUser}
                  onMessageSent={handleMessageSent}
                />
              </div>
            </div>
          )}

          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å user ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ parameter */}
          {!hasUserParam && !isLoading && (
            <div className="flex items-center justify-center h-full">
              <div className="text-center text-white">
                <p className="text-lg mb-2">Select a conversation to start chatting</p>
                <p className="text-sm text-gray-400">Choose someone from your matches</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
